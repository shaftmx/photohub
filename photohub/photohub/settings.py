"""
Django settings for photohub project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

def strtobool (val):
    val = val.lower()
    if val in ('y', 'yes', 't', 'true', 'on', '1'):
        return True
    elif val in ('n', 'no', 'f', 'false', 'off', '0'):
        return False
    else:
        raise Exception("invalid truth value %r" % (val,))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-51=qtuhifsb)&!!gdps^rkn2^re7_#nqp62pcq7fi^d*015+)6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ.get('DEBUG', "False"))

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS  = os.environ.get('DJANGO_URL').split(",")


# Application definition

INSTALLED_APPS = [
    'hub', # Reference the app to load db models eg https://docs.djangoproject.com/en/4.2/topics/db/models/#using-models
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'photohub.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'photohub.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': BASE_DIR / 'db.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        #'PORT': os.environ.get('DB_PORT', "3306"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s]: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter':'standard',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get('LOG_LEVEL', 'WARNING'),
    },
}

# Define and create static photo directory if not exist
MEDIA_ROOT = '/data/static' # Used by django.core.files.storage import default_storage https://docs.djangoproject.com/en/4.2/topics/files/
RAW_PHOTOS_PATH = 'raw'
SAMPLE_PHOTOS_PATH = 'cache/samples'

# TODO provide doc for all those envs vars. Grep os.env to get all

# If you want to limit the disk usage, we can enforce and compress raw photo file.
# TODO Provide env vars for both of them
# Apply a compression on raw photo files. Any of https://pillow.readthedocs.io/en/latest/reference/JpegPresets.html
RAW_PHOTOS_QUALITY = "web_high" # web_low, web_medium, web_high, web_maximum ...
# RAW_PHOTOS_QUALITY = None # web_low, web_medium, web_high, web_maximum ...
RAW_PHOTOS_MAX_SIZE = None # 2000, 4000 px

# Hacky option, if you re-upload an already existing file (based on md5sum), RAW_PHOTO_OVERRIDE_EXISTS to false
# Will simply skip the file. If True, the file will be saved again, so MAX_SIZE/QUALITY will be refreshed / applied
# Note, this option does not have impact on the tags/db, it will just refresh the file on disk and exifs
# RAW_PHOTO_OVERRIDE_EXISTS = False
# TODO provide env var for them
RAW_PHOTO_OVERRIDE_EXISTS = True # Default should be False for better performances

# TODO define which samples name we keep. And why not few env vars to override quality or rez
SAMPLE_PHOTOS_SETTINGS = [
    {"name": "xs",
     "max_size": 400, # px
     "quality": "web_medium"},
    {"name": "s",
     "max_size": 800, # px
     "quality": "web_medium"},
    {"name": "m",
     "max_size": 1200, # px
     "quality": "web_high"},
    {"name": "l",
     "max_size": 2000, # px
     "quality": "web_high"},
    {"name": "xl",
     "max_size": 4000, # px
     "quality": "web_very_high"},
]

for dir in [os.path.join(MEDIA_ROOT, RAW_PHOTOS_PATH), os.path.join(MEDIA_ROOT, SAMPLE_PHOTOS_PATH)]:
    _isExist = os.path.exists(dir)
    if not _isExist:
        os.makedirs(dir)